name: Flight Scraper CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  PYTHONPATH: ${{ github.workspace }}
  PYTEST_ADDOPTS: "--color=yes"

jobs:
  lint-and-type-check:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run Black formatter check
      run: |
        black --check --diff flight_scraper/ tests/


  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: macos-latest
            python-version: "3.10"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps chromium

    - name: Run unit tests
      env:
        DISPLAY: ":99"
      run: |
        # Start virtual display on Linux
        if [ "$RUNNER_OS" == "Linux" ]; then
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3
        fi
        
        pytest tests/unit/ -v \
          --tb=short \
          --cov=flight_scraper \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=85 \
          --durations=10
      shell: bash

    - name: Run integration tests (Linux only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      env:
        DISPLAY: ":99"
      run: |
        pytest tests/integration/ -v \
          --tb=short \
          --durations=10 \
          -m "not slow"
      shell: bash

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-mcp-server:
    name: MCP Server Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,mcp]

    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps chromium

    - name: Test MCP server functionality
      env:
        DISPLAY: ":99"
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        
        # Test MCP server unit tests
        pytest tests/unit/test_mcp_server.py -v --tb=short
        
        # Test MCP server can be imported and instantiated
        python -c "
        from flight_scraper.mcp.server import create_mcp_server
        server = create_mcp_server()
        print('✅ MCP server created successfully')
        "

  test-installation:
    name: Installation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Test fresh installation
      run: |
        python -m pip install --upgrade pip
        
        # Test installation from source
        pip install -e .
        
        # Test package imports
        python -c "import flight_scraper; print('✅ Package imports successfully')"
        python -c "from flight_scraper import GoogleFlightsScraper; print('✅ Main class imports')"
        python -c "from flight_scraper.core.models import SearchCriteria; print('✅ Models import')"
        
        # Test CLI installation
        which flight-scraper || echo "CLI not in PATH (expected)"

    - name: Test development installation
      run: |
        pip install -e .[dev]
        
        # Test development tools
        black --version
        pytest --version
        mypy --version

    - name: Test MCP installation
      run: |
        pip install -e .[mcp]
        
        # Test MCP dependencies
        python -c "import fastmcp; print('✅ FastMCP available')"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install safety bandit

    - name: Run safety check for known vulnerabilities
      run: |
        safety check --json || true

    - name: Run bandit security linting
      run: |
        bandit -r flight_scraper/ -f json || true

  build-matrix-report:
    name: Build Test Matrix Report
    needs: [lint-and-type-check, test, test-mcp-server, test-installation]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Generate test matrix report
      run: |
        echo "# Test Matrix Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.lint-and-type-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| MCP Server | ${{ needs.test-mcp-server.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Installation | ${{ needs.test-installation.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.lint-and-type-check.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.test-mcp-server.result }}" == "success" && \
              "${{ needs.test-installation.result }}" == "success" ]]; then
          echo "✅ **All tests passed!** The flight scraper is ready for production." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some tests failed.** Please review the failed jobs above." >> $GITHUB_STEP_SUMMARY
        fi

  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pytest-benchmark

    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps chromium

    - name: Run performance benchmarks
      env:
        DISPLAY: ":99"
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        
        # Run performance tests with mocked components
        pytest tests/unit/ -v \
          --benchmark-only \
          --benchmark-json=benchmark.json \
          --tb=short || true

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: false

  release-check:
    name: Release Readiness Check
    needs: [lint-and-type-check, test, test-mcp-server, test-installation]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Test package installation from wheel
      run: |
        pip install dist/*.whl
        python -c "import flight_scraper; print('✅ Package installs from wheel')"

    - name: Release readiness summary
      run: |
        echo "# Release Readiness Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Test suite passed on multiple Python versions" >> $GITHUB_STEP_SUMMARY
        echo "✅ MCP server functionality verified" >> $GITHUB_STEP_SUMMARY
        echo "✅ Installation process verified" >> $GITHUB_STEP_SUMMARY
        echo "✅ Package builds successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Ready for release!**" >> $GITHUB_STEP_SUMMARY