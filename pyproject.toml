[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flight-search-mcp"
version = "2.0.0"
description = "A comprehensive flight search scraper with MCP server support"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Flight Scraper Team", email = "contact@flightscraper.com"}
]
keywords = [
    "google", "flights", "scraper", "playwright", "web", "automation", 
    "mcp", "server", "travel", "booking", "airline", "price", "monitoring"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
]
dependencies = [
    "playwright>=1.40.0",
    "beautifulsoup4>=4.12.2",
    "lxml>=4.9.3",
    "python-dateutil>=2.8.2",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.0.0",
    "loguru>=0.7.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0", 
    "pytest-mock>=3.10.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "types-python-dateutil>=2.8.0",
    "safety>=2.3.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0", 
    "pytest-benchmark>=4.0.0",
]
mcp = [
    "fastmcp>=0.2.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
]

[project.scripts]
flight-scraper = "flight_scraper.cli.main:app"
flight-scraper-mcp = "mcp_server:main"

[project.urls]
Homepage = "https://github.com/chonseng/flight-search-mcp"
Documentation = "https://github.com/chonseng/flight-search-mcp/wiki"
Repository = "https://github.com/chonseng/flight-search-mcp"
"Bug Reports" = "https://github.com/chonseng/flight-search-mcp/issues"
Changelog = "https://github.com/chonseng/flight-search-mcp/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["flight_scraper*"]
exclude = ["tests*", "examples*", "docs*"]

[tool.setuptools.package-data]
flight_scraper = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | htmlcov
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["**/.venv/*", "**/venv/*", "**/env/*"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "fastmcp.*",
    "loguru.*",
    "rich.*",
    "typer.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["flight_scraper"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--color=yes",
    "--durations=10",
    "--cov=flight_scraper",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=85",
    "--asyncio-mode=auto",
]
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (slower, may use browser)",
    "slow: Slow tests that take more than 5 seconds",
    "network: Tests that require network access",
    "browser: Tests that require browser automation", 
    "mcp: Tests specific to MCP server functionality",
    "config: Tests for configuration management",
    "error: Tests for error scenarios and edge cases",
    "performance: Performance and benchmark tests",
    "smoke: Basic smoke tests for quick validation",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:pydantic.*",
    "ignore::UserWarning:playwright.*",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

# commitizen configuration for conventional commits
[tool.commitizen]
name = "cz_conventional_commits"
version = "2.0.0"
tag_format = "v$major.$minor.$patch"
update_changelog_on_bump = true