[tool:pytest]
# Test discovery and collection
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version requirements
minversion = 7.0

# Add options that will always be used
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --color=yes
    --durations=10
    --cov=flight_scraper
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=85
    --asyncio-mode=auto

# Custom markers for test categorization
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (slower, may use browser)
    slow: Slow tests that take more than 5 seconds
    network: Tests that require network access
    browser: Tests that require browser automation
    mcp: Tests specific to MCP server functionality
    config: Tests for configuration management
    error: Tests for error scenarios and edge cases
    performance: Performance and benchmark tests
    smoke: Basic smoke tests for quick validation

# Test filtering options
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:pydantic.*
    ignore::UserWarning:playwright.*

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = flight_scraper
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */.*
    setup.py
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml